# Setup for the selected toolchain

#
# Handle old-style chip-specific toolchain names in the absence of
# a new-style toolchain specification, force the selection of a single
# toolchain and allow the selected toolchain to be overridden by a
# command-line selection.
#

ifeq ($(filter y, \
      $(CONFIG_ARMV7M_TOOLCHAIN_CODEREDL) \
    ),y)
  CONFIG_ARMV7M_TOOLCHAIN ?= CODEREDL
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7M_TOOLCHAIN_CODESOURCERYL) \
    ),y)
  CONFIG_ARMV7M_TOOLCHAIN ?= CODESOURCERYL
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7M_TOOLCHAIN_GNU_EABIL) \
    ),y)
  CONFIG_ARMV7M_TOOLCHAIN ?= GNU_EABIL
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7M_TOOLCHAIN_CLANGL) \
    ),y)
  CONFIG_ARMV7M_TOOLCHAIN ?= CLANGL
endif

#
# Supported toolchains
#
# Each toolchain definition should set:
#
#  CROSSDEV         The GNU toolchain triple (command prefix)
#  ARCROSSDEV       If required, an alternative prefix used when
#                   invoking ar and nm.
#  ARCHCPUFLAGS     CPU-specific flags selecting the instruction set
#                   FPU options, etc.
#  MAXOPTIMIZATION  The maximum optimization level that results in
#                   reliable code generation.
#

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  MAXOPTIMIZATION := $(CONFIG_DEBUG_OPTLEVEL)
endif

# Parametrization for ARCHCPUFLAGS

ifeq ($(CONFIG_ARCH_CORTEXM4),y)
  TOOLCHAIN_ARM7EM   := y
  TOOLCHAIN_MCPU     := -mcpu=cortex-m4
  TOOLCHAIN_MTUNE    := -mtune=cortex-m4
  TOOLCHAIN_MARCH    := -march=armv7e-m
  ifeq ($(CONFIG_ARCH_FPU),y)
    TOOLCHAIN_MFLOAT := -mfpu=fpv4-sp-d16 -mfloat-abi=hard
  else
    TOOLCHAIN_MFLOAT := -mfloat-abi=soft
  endif
else ifeq ($(CONFIG_ARCH_CORTEXM7),y)
  TOOLCHAIN_ARM7EM   := y
  TOOLCHAIN_MCPU     := -mcpu=cortex-m7
  TOOLCHAIN_MTUNE    := -mtune=cortex-m7
  TOOLCHAIN_MARCH    := -march=armv7e-m
  ifeq ($(CONFIG_ARCH_FPU),y)
  ifeq ($(CONFIG_ARCH_DPFPU),y)
    TOOLCHAIN_MFLOAT := -mfpu=fpv5-d16 -mfloat-abi=hard
  else
    TOOLCHAIN_MFLOAT := -mfpu=fpv5-sp-d16 -mfloat-abi=hard
  endif
  else
    TOOLCHAIN_MFLOAT := -mfloat-abi=soft
  endif
else # ifeq ($(CONFIG_ARCH_CORTEXM3),y)
  TOOLCHAIN_ARM7EM   := n
  TOOLCHAIN_MCPU     := -mcpu=cortex-m3
  TOOLCHAIN_MTUNE    := -mtune=cortex-m3
  TOOLCHAIN_MARCH    := -march=armv7-m
  TOOLCHAIN_MFLOAT   := -mfloat-abi=soft
endif

# Code Red RedSuite under Linux

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),CODEREDL)
  CROSSDEV ?= arm-none-eabi-
  ARCROSSDEV ?= arm-none-eabi-
  MAXOPTIMIZATION ?= -Os
  ARCHCPUFLAGS = $(TOOLCHAIN_MCPU) -mthumb $(TOOLCHAIN_MFLOAT)
endif

# CodeSourcery under Linux

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),CODESOURCERYL)
  CROSSDEV ?= arm-none-eabi-
  ARCROSSDEV ?= arm-none-eabi-
  MAXOPTIMIZATION ?= -O2
  ARCHCPUFLAGS = $(TOOLCHAIN_MCPU) -mthumb $(TOOLCHAIN_MFLOAT)
endif

# Generic GNU EABI toolchain on OS X, Linux or any typical Posix system

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),GNU_EABIL)
  CROSSDEV ?= arm-none-eabi-
  ARCROSSDEV ?= arm-none-eabi-
  MAXOPTIMIZATION ?= -Os
  ARCHCPUFLAGS = $(TOOLCHAIN_MCPU) -mthumb $(TOOLCHAIN_MFLOAT)
endif

# Clang toolchain on OS X, Linux or any typical Posix system

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),CLANGL)
  CROSSDEV ?= arm-none-eabi-
  ARCROSSDEV ?= arm-none-eabi-
  MAXOPTIMIZATION ?= -Os
  ARCHCPUFLAGS = $(TOOLCHAIN_MCPU) -mthumb $(TOOLCHAIN_MFLOAT)
endif
